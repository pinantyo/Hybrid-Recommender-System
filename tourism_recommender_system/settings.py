"""
Django settings for tourism_recommender_system project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Get Environment from env
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = config('DEBUG', default=False)
DEBUG = bool(int(config('DJANGO_DEBUG', default=0)))
ALLOWED_HOSTS = config('DJANGO_ALLOWED_HOSTS').split(',')

CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS').split(',')

if DEBUG:
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_HTTPONLY = False

else:
    X_FRAME_OPTIONS = 'DENY'

    # HTTPS SETTINGS
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_HTTPONLY = True

    # HSTS SETTINGS
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True


    # Content-Type AND XSS
    # SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True

    # CSP
    # CSP_DEFAULT_SRC = ("'self'",)

    # CSP_SCRIPT_SRC = ("'self'","app.sandbox.midtrans.com","ajax.googleapis.com","app.sandbox.midtrans.com","unpkg.com","cdn.jsdelivr.net")

    # CSP_STYLE_SRC = ("'self'","cdn.jsdelivr.net","cdnjs.cloudflare.com")

    # CSP_FONT_SRC = config('DJANGO_CSP_FONT_SRC').split(',')
    
    # CSP_IMG_SRC = ("'self'",)

    # CSP_INCLUDE_NONCE_IN = ['script-src','script-src-elem','style-src','style-src-elem']

# LOGIN URL EXEMPTION
LOGIN_EXEMPT_URLS = (
     r'^/',
     r'^login/$',
     r'^register/$',
     r'^api/sites/$',
     r'^api/sites/(?P<id>\d+)/$',
)

# Application definition

INSTALLED_APPS = [
    "admin_volt.apps.AdminVoltConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "app",
    "frontend",
]

MIDDLEWARE = [
    # "csp.middleware.CSPMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "tourism_recommender_system.urls"

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ['templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Reddis
CACHES_CONFIG = bool(int(config('DJANGO_CACHE', default=0)))
if CACHES_CONFIG:
    CACHE_TTL= int(config('DJANGO_CACHE_TTL', default=5))*60

    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://127.0.0.1:6379/1",
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "PASSWORD": "",
            },
        }
    }

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"



WSGI_APPLICATION = "tourism_recommender_system.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        'NAME': config('DB_NAME', default=''),
        'USER': config('DB_USER', default=''),
        'PASSWORD': config('DB_PASSWORD', default=''),
        'HOST': config('DB_HOST', default=''),
        'PORT': config('DB_PORT', default=5436),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]

# Autentikasi Backend Remote dan Umum

AUTHENTICATION_BACKENDS = [
        'django.contrib.auth.backends.RemoteUserBackend',
        'django.contrib.auth.backends.ModelBackend',
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = config('LANGUAGE_CODE', default='en-us')

TIME_ZONE = config('TIME_ZONE', default='UTC')

USE_I18N = bool(int(config('USE_I18N', default='1')))

USE_TZ = bool(int(config('USE_TZ', default='1')))


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "/static/"

if DEBUG:
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static'),
    ]

else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

if not DEBUG:
    # STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"
    STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# AUTH COSTUM
AUTH_USER_MODEL = 'app.AccountCustom'


# BROWSER SESSION
SESSION_EXPIRE_AT_BROWSER_CLOSE = bool(int(config('SESSION_EXPIRE_AT_BROWSER_CLOSE',default='1')))

# LOGIN URL
LOGIN_URL = '/login/'


# EMAILING
EMAIL_HOST = config('EMAIL_HOST', default='')
EMAIL_PORT = int(config('EMAIL_PORT', default=''))
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
EMAIL_USE_SSL = bool(int(config('EMAIL_USE_SSL', default='0')))
EMAIL_USE_TLS = bool(int(config('EMAIL_USE_TLS', default='1')))

# PAYMENT
SERVER_KEY = config('BILLING_SERVER_KEY', default='')
CLIENT_KEY = config('BILLING_CLIENT_KEY', default='')

# GPU OPTIMIZATION
CUDA_AVAILABLE = config('CUDA_AVAILABLE', default='-1')
